Errata for original printing of the book.  These changes will be made in a subsequent
release of the book sometime around the middle of 2025.

____________________________________________________________________


Page 31, change
   One such place is the rule for subprogramDecls, which always includes at least one subprogramDecl.
      subprogramDecls = subprogramDecl { subprogramDecl } .
to
   One such place is the lexical rule for decimalLiteral, which always includes at least one digit.
      decimalLiteral = digit { digit } .

____________________________________________________________________


Near the bottom of page 44, the rule for syntaxFactor is missing the grouping with parentheses
plus a period at the end.
Change
   syntaxFactor = identifier | terminalSym
                | "{" syntaxExpr "}" | "[" syntaxExpr "]"
to
   syntaxFactor = identifier | terminalSym | "{" syntaxExpr "}"
                | "[" syntaxExpr "]" | "(" syntaxExpr ")" .

Also, delete the rule for escapedChar and change
   terminalSym = "\"" { terminalChar | escapedChar } "\"" .
to
   terminalSym = "\"" { terminalChar | "\\" ( "\"" | "\\" ) } "\"" .

____________________________________________________________________


Near the top of page 45, delete the sentence
    Similarly, escapedChar is defined to be ... or another backslash.

____________________________________________________________________


Near the middle of p. 58, change
   (except that arrays are always passed by value, regardless of how the parameter is declared)
to
   (except that arrays are always passed by reference, regardless of how the parameter is declared)

____________________________________________________________________


Pages 95, 124, and 315, change
   subprogramDecls = subprogramDecl { subprogramDecl } .
to
   subprogramDecls = { subprogramDecl } .

While it is true that a program requires at least one subprogram, procedure main(),
it is simpler to parse the rule for zero or more subprogram declarations and then
add a constraint in AST class Program to check for procedure main.

____________________________________________________________________


Pages 73, 98, 302, and 318, change
    hexLiteral = [ "0x" | "0X" ] hexDigit { hexDigit} .
to
    hexLiteral = ( "0x" | "0X" ) hexDigit { hexDigit } .

Also change
   binaryLiteral = [ "0b" | "0B ] binaryDigit { binaryDigit } .
to
   binaryLiteral = ( "0b" | "0B" ) binaryDigit { binaryDigit } .

___________________________________________________________________


Near the bottom of page 95, the same follow set is repeated.  For the second follow set,
change
   Follow(loopStmt)
to
   Follow(statement)

___________________________________________________________________


Page 98, change
   As an aside, note that the structural grammar for CPRL uses “one or more” in only one rule.
   subprogramDecls = subprogramDecl { subprogramDecl } .
      // one or more subprogram declarations
   Similarly, the lexical grammar for CPRL uses “one or more” in only three rules.
to
   As an aside, note that the structural grammar for CPRL does not use “one or more” in any
   rules, and the lexical grammar for CPRL uses “one or more” in only three rules.

___________________________________________________________________


Top of page 103, the rule statement is missing the nonterminal forLoopStmt.

___________________________________________________________________


Top of page 144, change
   number characters between the quotation marks.
to
   number of characters between the quotation marks.

___________________________________________________________________


Bottom of page 147 and top of page 159

In the rectangle for SingleVarDecl, change "PROGRAM" to "GLOBAL"

___________________________________________________________________


Page 148 in subsection ConstValue

For the first constructor add this line at the end.
   this.decl = null

For the second constructor add this line at the end.
   this.decl = decl

___________________________________________________________________


Page 152, Section 8.8, change
   initilizers
to
   initializers

___________________________________________________________________


Page 160, in the bullet for ConstDecl and ConstValue, change
   package edu.citadel.common
to
   package edu.citadel.common.util

___________________________________________________________________


Page 161, add the following constraint rule.

•  Program
   – Miscellaneous Rule: A program must contain a parameterless procedure named main().

___________________________________________________________________


Page 169, in the table comparing CVM and JVM Opcodes, change
   BREQ
to
   BE

___________________________________________________________________


Page 194, in method emit() for class AssignmentStmt, change
   var.emit();
to
   variable.emit();

___________________________________________________________________


Page 255, in the excerpt from method parseArrayTypeConstr(), change
   val numElements = parseConstIntValue()
   ...
   val elemType = parseTypeName()
   val nElements = numElements.intValue
   val typeName  = "array[$nElements] of $elemType"
   arrayType = ArrayType(typeName, nElements, elemType)
to
   val numElements = parseIntConstValue()
   match(Symbol.rightBracket)
   match(Symbol.ofRW)
   val elemType = parseTypeName()
   val typeName = "array[${numElements.intValue}] of $elemType"

___________________________________________________________________

Page 256, under the first bullet labeled "Miscellaneous Rule", change
   While most miscellaneous rules are handled in checkContraints() methods,
   this one is conveniently handled in parser method parseParameterDecl().
   Immediately after parsing the type name, we simply force the parameter to be a variable
   parameter.
      if (paramType is ArrayType)
          isVarParam = true
to
   This rule is handled in the checkContraints() methods for AST classes FunctionDecl and
   ProcedureDecl.  If the type of a formal parameter is declared as an array type, we simply
   force the parameter to be a variable parameter.
      if (paramDecl.type is ArrayType)
          paramDecl.isVarParam = true

___________________________________________________________________


Page 257, under the the two rules for Variable, add the following clarifying paragraph.
   Note that parser method parseArrayTypeConstr() returns an ArrayType, not an AST
   class.  Therefore, this parser method must enforce a rule identical to the type rule stated
   above for ArrayTypeDecl – there is no AST class to check the constraint.  For consistency,
   parser method parseArrayTypeDecl() is written using logic similar to that of
   parseArrayTypeConstr(), so enforcing the type rule in ArrayTypeDecl is technically
   redundant; it was already checked in the parser.  So here we have a rare case of a type rule
   being checked in the parser.

___________________________________________________________________


Page 257, approximately two-thirds the way down the page, checkInitializer()
is misspelled.  Change
   simply calls checkInitialzer()
to
   simply calls checkInitializer()

___________________________________________________________________


Page 265, in the excerpt from method parseStringTypeConstr(), change
   val numElements = parseIntConstValue()
   ...
   val nElements = numElements.intValue
   val typeName  = "string[$nElements]"
   stringType = StringType(typeName, nElements)
to
   val capacity = parseIntConstValue()
   match(Symbol.rightBracket)
   val typeName = "string[${capacity.intValue}]"

___________________________________________________________________


Page 267, Insert the following clarifying paragraph at the top of the page before the bullet
point Padding.
   Analogous to arrays, parser method parseSringTypeConstr() returns a StringType, not
   an AST class.  Therefore, this parser method must enforce a rule identical to the type rule
   stated above for StringTypeDecl – there is no AST class to check the constraint.  For
   consistency, parser method parseStringTypeDecl() is written using logic similar to that of
   parseStringTypeConstr(), so enforcing the type rule in StringTypeDecl is technically
   redundant; it was already checked in the parser.  So here we have another rare case of a
   type rule being checked in the parser.